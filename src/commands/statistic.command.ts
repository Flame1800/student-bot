import { IBotContext } from "../context/context.interface";
import { Command } from "./command.class";
import { Markup, Telegraf } from "telegraf";
import mockData from "../../data/db.json"
import { Subject } from "../types/subject.type";
import { Mark } from "../types/mark.type";

export class StatisticCommand extends Command {
    constructor(bot: Telegraf<IBotContext>) {
        super(bot);
    }

    handle(): void {
        const data = mockData

        this.bot.hears("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", (ctx) => {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            ctx.reply("–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã: ")

            data.subjects.forEach(subject => {
                const message = `‚ñ™Ô∏è <b>${subject.name}</b> \n\nüïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <i>${subject.duration} —á.</i> \n\n ${subject.course} –ö—É—Ä—Å. ${subject.semestr} –°–µ–º–µ—Å—Ç—Ä. \n\nüë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:  ${subject.teacher}`
                ctx.replyWithHTML(message, Markup.inlineKeyboard([
                    Markup.button.callback('–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–º–µ—Ç', `subject:${subject.id}`)
                ]));
            })
        });



        this.bot.action(/subject:(\d+)/, async (ctx) => {

            const subjectId: number = parseInt(ctx.match[1]);
            const subject: Subject | undefined = data.subjects.find(s => s.id === subjectId);

            if (subject) {
                const markSigns = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"];
                const currentMarks: Mark[] = data.marks.filter(mark => +mark.subjectId === +subjectId);
                const avgMark = currentMarks.reduce((acc, curr) => curr.value + acc, 0) / currentMarks.length;

                let message = `‚ñ™Ô∏è <b>${subject.name}</b> \n ${subject.course} –ö—É—Ä—Å. ${subject.semestr} –°–µ–º–µ—Å—Ç—Ä. \n\nüë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:  ${subject.teacher}\n\n ‚ÑπÔ∏è –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${avgMark.toFixed(2)} \nüîπ –û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: \n`
                currentMarks.forEach(mark => {
                    message += `------------------------------\n ${mark.date} \n ${mark.lessonNumber} –ø–∞—Ä–∞: ${markSigns[mark.value - 1]}\n `;
                  }); 
                
                ctx.replyWithHTML(message, Markup.inlineKeyboard([
                    Markup.button.callback('–ó–∞–∫—Ä—ã—Ç—å', 'close')
                ]));
            }
        });
    }
}