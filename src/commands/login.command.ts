import { IBotContext } from "../context/context.interface";
import getUser from "../endpoints/getUser";
import navigationPattern from "../utils/navigationPattern";
import { Command } from "./command.class";
import {Telegraf, Markup } from "telegraf";
import { navigationMenu } from "./start.commandt";
import { ConfigService } from "../config/config.service";
import adminIds from "../../data/admin_ids.json"
import logger from "../logger/logger";
import User from "../schemes/user"
import errorWraper from "../utils/errorWraper";

const configService = new ConfigService()

export class LoginCommand extends Command {
    constructor(bot: Telegraf<IBotContext>) {
        super(bot); 
    }

    handle(): void {
        this.bot.action('login', (ctx: IBotContext) => {
            try {
                if (ctx.session.user) {
                    ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã! –î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –≤ –º–µ–Ω—é", Markup.inlineKeyboard([
                        navigationPattern.navigationMenu.button
                    ]))
                    return
                }
    
                const message = `–Ø –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–∫–∞ –Ω–µ —É–∑–Ω–∞—é –∫—Ç–æ –∏—Ö –ø—Ä–æ—Å–∏—Ç. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —á—Ç–æ –±—ã —è –º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Å –ø–æ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \n\n–ö–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É –≤–≤–æ–¥–∞ —Å—Å–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —É –≤–∞—Å –µ–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üéõ`
                ctx.reply(message, Markup.keyboard([
                    Markup.button.contactRequest('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º')
                ]).resize().oneTime())  
            } catch (error) {
                console.error(error)
            }
        })

        this.bot.action('logout', (ctx) => {
            try {
                if (!ctx.session.user?.user_id) {
                    errorWraper(() => ctx.reply("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!"))
                    return
                }
    
                ctx.session.user = null
                ctx.reply("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", Markup.inlineKeyboard([
                    Markup.button.callback('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', 'login')
                ]))
            } catch (error) {
                console.error(error)
            }
        })

        this.bot.command('tel', async (ctx) => {
            const { id } = ctx.message.from

            if (adminIds.data.indexOf(id) === -1) {
                await ctx.reply("–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                return
            }

            ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω")

            this.bot.on('text', async (ctx) => {
                const phone = ctx.message.text 
                const currPhoneNum = phone.trim().replace("+7", "8")

                try {
                    const responce = await getUser(currPhoneNum)

                    if (!responce.data.user_id) {
                        logger.log('/tel', null, true, 'login')
                        return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
                    } 

                    ctx.session.user = responce.data

                    const newUser = await new User(responce.data)
                    await newUser.save()

                    ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!\n–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?`, navigationMenu)

                    const user = ctx.session.user ? {...ctx.session.user, userPhone: currPhoneNum} : null
                    logger.log('/tel', user, true, 'login')

                } catch (error) {
                    logger.log('/tel', ctx.session.user, false, 'login')
                    console.log(`–û—à–∏–±–∫–∞: ${error}`)
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. ${error}`)
                }
            })
        })

        this.bot.on('contact', async (ctx) => {

            const phoneNumber = configService.get('MOCK_PHONE') !== 'false' ? configService.get('MOCK_PHONE') : ctx.message.contact.phone_number
            let userPhone = ""

            if (phoneNumber.startsWith("+7")) {
                userPhone = phoneNumber.replace("+7", "8")
            }
            else if (phoneNumber.startsWith("7")) {
                userPhone = phoneNumber.replace("7", "8")
            }

            try {
                const responce = await getUser(userPhone)
 
                if (responce.data.user_id) {
                    ctx.session.user = responce.data

                    ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!\n–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?`, navigationMenu)
                    
                    const user = ctx.session.user ? {...ctx.session.user, userPhone} : null
                    logger.log('/login', user, true, 'login')

                } else {
                    ctx.reply(`–ö–∞–∂–µ—Ç—Å—è –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É.`, Markup.inlineKeyboard([
                        Markup.button.callback('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', 'login')
                    ]))
                    logger.guestLog('/login', phoneNumber, false, 'login')

                }
            } catch (error) {
                logger.guestLog('/login', phoneNumber, false, 'login')
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. ${error}`)
            } 

            return null;
        })
    }
} 